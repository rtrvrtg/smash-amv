<?php

/**
 * Implements hook_field_formatter_info().
 */
function mediaelement_sourced_link_field_formatter_info() {
  $formatters = array();

  $formatters['mediaelement_sourced_video'] = array(
    'label' => t('MediaElement Sourced Video'),
    'field types' => array('file', 'link_field'),
    'settings' => array(
      'type' => variable_get('mediaelement_video_default_type', 'video/mp4'),
      'controls' => variable_get('mediaelement_video_default_controls', TRUE),
      'width' => variable_get('mediaelement_video_default_width', '640'),
      'height' => variable_get('mediaelement_video_default_height', '385'),
      'download_link' => variable_get('mediaelement_video_default_download_link', FALSE),
      'download_text' => variable_get('mediaelement_video_default_download_text', t('Download')),
    ),
  );

  return $formatters;
}

/**
 * Implements hook_field_formatter_view().
 */
function mediaelement_sourced_link_field_formatter_view($entity_type, $entity, $field, $instance, $langcode, $items, $display) {
  // A unique caller per page for the JS specific settings to use. This may be
  // different for ever page view and should not be used for styling.
  static $id = 0;
  $element = array();
  $path = drupal_get_path('module', 'mediaelement');
  foreach ($items as $delta => $item) {
    // Support the link field type which stores it's data in 'url'.
    $src = ($field['type'] == 'link_field') ? $item['url'] : $item['uri'];

    $settings = $display['settings'];

	$type = $settings['type'];

    $js_settings = array();
    $js_settings['opts'] = array();
    $js_settings['controls'] = (bool)$settings['controls'];
    if ($display['type'] == 'mediaelement_sourced_video') {
      $js_settings['opts']['videoHeight'] = (int)$settings['height'];
      $js_settings['opts']['videoWidth'] = (int)$settings['width'];

      if (strpos($settings['width'], '%') > 0) {
        $js_settings['opts']['videoWidth'] = (int)$settings['width'] . '%';        
      }
    }

    $class = 'mediaelement-formatter-identifier-' . time() . '-' . $id++;
    $element[$delta] = array(
      '#attributes' => array(
        'src' => file_create_url($src),
        'poster' => file_create_url($src) . '.jpg',
        'type' => $type,
        'class' => $class,
        'preload' => 'none',
      ),
      '#settings' => $settings,
      '#attached' => array(
        'library' => array(array('mediaelement', 'mediaelement')),
        'js' => array(
          $path . '/mediaelement.js' => array(),
          0 => array('type' => 'setting', 'data' => array('mediaelement' => array('.' . $class => $js_settings))),
        ),
      ),
    );
    if ($settings['controls']) {
      $element[$delta]['#attributes']['controls'] = 'controls';
    }

    if ($display['type'] == 'mediaelement_sourced_video') {
      $element[$delta]['#theme'] = 'mediaelement_sourced_video';
      $element[$delta]['#attributes']['height'] = $display['settings']['height'];
      $element[$delta]['#attributes']['width'] = $display['settings']['width'];
      drupal_set_message("For best results, view this site in Google Chrome.", 'status', FALSE);
    }
  }
  return $element;
}

/**
 * Implements hook_theme().
 */
function mediaelement_sourced_link_theme() {
  return array(
    'mediaelement_sourced_video' => array(
      'variables' => array('attributes' => array(), 'settings' => array()),
    ),
  );
}

function theme_mediaelement_sourced_video($variables) {
  $output = '<div class="mediaelement-video">';

  $src = $variables['attributes']['src'];
  unset($variables['attributes']['src']);
  $type = $variables['attributes']['type'];
  unset($variables['attributes']['type']);

  $source = '<source src="' . $src . '" type="' . $type . '" />';
  $output .= '<video ' . drupal_attributes($variables['attributes']) . ' >' . $source . '</video>';
  if ($variables['settings']['download_link']) {
    $output .= '<div class="mediaelement-download-link"><a href="' . $variables['attributes']['src'] . '">' . filter_xss_admin($variables['settings']['download_text']) . '</a></div>';
  }
  $output .= '</div>';
  return $output;
}

/**
 * Implements hook_field_formatter_settings_form().
 */
function mediaelement_sourced_link_field_formatter_settings_form($field, $instance, $view_mode, $form, &$form_state) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];
  $element = array();

  $element['type'] = array(
    '#title' => t('MIME Type'),
    '#type' => 'textfield',
    '#default_value' => $settings['type'],
  );

  $element['controls'] = array(
    '#title' => t('Controls'),
    '#type' => 'checkbox',
    '#default_value' => $settings['controls'],
  );

  $element['width'] = array(
    '#title' => t('Width'),
    '#type' => 'textfield',
    '#default_value' => $settings['width'],
  );

  $element['height'] = array(
    '#title' => t('Height'),
    '#type' => 'textfield',
    '#default_value' => $settings['height'],
  );

  $element['download_link'] = array(
    '#title' => t('Download Link'),
    '#type' => 'checkbox',
    '#default_value' => $settings['download_link'],
  );

  $element['download_text'] = array(
    '#title' => t('Download Link Text'),
    '#type' => 'textfield',
    '#default_value' => $settings['download_text'],
  );

  return $element;
}

/**
 * Implements hook_field_formatter_settings_summary().
 */
function mediaelement_sourced_link_field_formatter_settings_summary($field, $instance, $view_mode) {
  $display = $instance['display'][$view_mode];
  $settings = $display['settings'];

  $summary = '';

  if ($display['type'] == 'mediaelement_sourced_video') {
    $summary = t('Type: @type, Width: @width px, Height: @height px', array('@type' => $settings['type'], '@width' => $settings['width'], '@height' => $settings['height']));
  }
  return $summary;
}
