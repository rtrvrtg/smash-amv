<?php
/**
 * @file
 * Allow uploading of files directly to AmazonS3 via the browser using CORS,
 * using the Shov3 library.
 */

/**
 * Implements hook_menu().
 */
function shov3_file_menu() {
  $items = array();
  $items['ajax/shov3-sign'] = array(
    'title' => 'Sign S3 Request for Shov3',
    'page callback' => 'shov3_file_sign',
    'access callback' => TRUE,
    'type' => MENU_CALLBACK,
    'file' => 'shov3_file.ajax.inc',
  );
  $items['shov3-test'] = array(
    'title' => 'Test Shov3',
    'page callback' => 'shov3_file_test',
    'access arguments' => array('administer site'),
    'file' => 'shov3_file.test.inc',
  );
  $items['shov3-sign-test'] = array(
    'title' => 'Test Shov3 Signing',
    'page callback' => 'shov3_file_signtest',
    'access arguments' => array('administer site'),
    'file' => 'shov3_file.test.inc',
  );
  return $items;
}

/**
 * Implements hook_element_info().
 */
function shov3_file_element_info() {
  $file_path = drupal_get_path('module', 'shov3_file');
  $lib_path = drupal_get_path('module', 'shov3_file') . '/Shov3';

  $types['shov3_file_upload'] = array(
    '#input' => TRUE,
    '#process' => array('shov3_file_upload_process'),
    '#value_callback' => 'shov3_file_upload_value',
    '#element_validate' => array('shov3_file_upload_validate'),
    '#pre_render' => array('file_managed_file_pre_render'),
    '#theme' => 'shov3_file_upload',
    '#theme_wrappers' => array('form_element'),
    '#upload_validators' => array(),
    // The S3 directory relative to the bucket root where files should be
    // uploaded.
    '#upload_location' => '',
    '#size' => 22,
    '#extended' => FALSE,
    '#attached' => array(
      'js' => array(
        $lib_path . '/lib/jquery.md5.js',
        $lib_path . '/lib/sha1.js',
        $lib_path . '/lib/webtoolkit.base64.js',
        $lib_path . '/shov3.js',

        $file_path . '/shov3_file.wrap.js',

        drupal_get_path('module', 'file') . '/file.js',
      ),
      'library' => array(),
    ),
  );
  return $types;
}

/**
 * Implements hook_field_widget_info().
 */
function shov3_file_field_widget_info() {
  return array(
    'shov3_file' => array(
      'label' => t('Shov3 File Upload'),
      'field types' => array('file'),
      'settings' => array(),
      'behaviors' => array(
        'multiple values' => FIELD_BEHAVIOR_CUSTOM,
        'default value' => FIELD_BEHAVIOR_NONE,
      ),
    ),
  );
}

/**
 * Implements hook_form_alter().
 */
function shov3_file_form_alter(&$form, $form_state, $form_id) {
  // There is no clean way to alter the field settings form provided by another
  // module so for now we do this.
  // @link http://drupal.org/node/1308860

  if (($form_id == 'field_ui_field_edit_form' && $form['#field']['type'] == 'file') || ($form_id == 'field_ui_field_settings_form' && $form['field']['type']['#value'] == 'file')) {
    // Remove anyting other than S3 from the scheme options.
    $form['field']['settings']['uri_scheme']['#options'] = array('s3' => t('Amazon S3'));

    // Repurpose the file_directory field.
    $form['instance']['settings']['file_directory']['#title'] = t('Object prefix');
    $form['instance']['settings']['file_directory']['#description'] = t('Optional subdirectory within the S3 bucket where files will be stored. Do not include preceding or trailing slashes.');
  }
}

/**
 * Implements hook_field_widget_form().
 */
function shov3_file_field_widget_form(&$form, &$form_state, $field, $instance, $langcode, $items, $delta, $element) {
  // A lot of this is borrowed from file_field_widget_form().
  $defaults = array(
    'fid' => 0,
    'display' => !empty($field['settings']['display_default']),
    'description' => '',
  );

  // Load the items for form rebuilds from the field state as they might not be
  // in $form_state['values'] because of validation limitations. Also, they are
  // only passed in as $items when editing existing entities.
  $field_state = field_form_get_state($element['#field_parents'], $field['field_name'], $langcode, $form_state);
  if (isset($field_state['items'])) {
    $items = $field_state['items'];
  }

  // Essentially we use the shov3_file_upload type, extended with some
  // enhancements. Which, is an extension of the managed_file type.
  $element_info = element_info('shov3_file_upload');
  $element += array(
    '#type' => 'shov3_file_upload',
    '#upload_location' => file_field_widget_uri($field, $instance),
    '#upload_validators' => file_field_widget_upload_validators($field, $instance),
    '#value_callback' => 'shov3_file_field_widget_value',
    '#process' => array_merge($element_info['#process'], array('file_field_widget_process')),
    //'#progress_indicator' => $instance['widget']['settings']['progress_indicator'],
    // Allows this field to return an array instead of a single value.
    '#extended' => TRUE,
  );

  if ($field['cardinality'] == 1) {
    // Set the default value.
    $element['#default_value'] = !empty($items) ? $items[0] : $defaults;
    // If there's only one field, return it as delta 0.
    if (empty($element['#default_value']['fid'])) {
      $element['#description'] = theme('file_upload_help', array('description' => $element['#description'], 'upload_validators' => $element['#upload_validators']));
    }
    $elements = array($element);
  }
  else {
    // If there are multiple values, add an element for each existing one.
    foreach ($items as $item) {
      $elements[$delta] = $element;
      $elements[$delta]['#default_value'] = $item;
      $elements[$delta]['#weight'] = $delta;
      $delta++;
    }
    // And then add one more empty row for new uploads except when this is a
    // programmed form as it is not necessary.
    if (($field['cardinality'] == FIELD_CARDINALITY_UNLIMITED || $delta < $field['cardinality']) && empty($form_state['programmed'])) {
      $elements[$delta] = $element;
      $elements[$delta]['#default_value'] = $defaults;
      $elements[$delta]['#weight'] = $delta;
      $elements[$delta]['#required'] = ($element['#required'] && $delta == 0);
    }
    // The group of elements all-together need some extra functionality
    // after building up the full list (like draggable table rows).
    $elements['#file_upload_delta'] = $delta;
    $elements['#theme'] = 'file_widget_multiple';
    $elements['#theme_wrappers'] = array('fieldset');
    $elements['#process'] = array('file_field_widget_process_multiple');
    $elements['#title'] = $element['#title'];
    $elements['#description'] = $element['#description'];
    $elements['#field_name'] = $element['#field_name'];
    $elements['#language'] = $element['#language'];
    $elements['#display_field'] = $field['settings']['display_field'];

    // Add some properties that will eventually be added to the file upload
    // field. These are added here so that they may be referenced easily through
    // a hook_form_alter().
    $elements['#file_upload_title'] = t('Add a new file');
    $elements['#file_upload_description'] = theme('file_upload_help', array('description' => '', 'upload_validators' => $elements[0]['#upload_validators']));
  }

  return $elements;
}

/**
 * Element process function for shov3_file_upload element.
 *
 * Expands the element to include Upload and Remove buttons, as well as support
 * for a default value.
 *
 * In order to take advantage of the work that file.module is already doing for
 * elements of type #managed_file we stick to the same naming convention here.
 */
function shov3_file_upload_process($element, &$form_state, &$form) {
  $fid = isset($element['#value']['fid']) ? $element['#value']['fid'] : 0;
  $element['#file'] = $fid ? file_load($fid) : FALSE;
  $element['#tree'] = TRUE;

  // AJAX settings used for upload and remove buttons.
  $ajax_settings = array(
    'callback' => 'shov3_file_upload_js',
    'wrapper' => $element['#id'] . '-ajax-wrapper',
    'method' => 'replace',
    'effect' => 'fade',
  );

  // The "Upload" button.
  $element['upload_button'] = array(
    '#name' => implode('_', $element['#parents']) . '_upload_button',
    '#type' => 'submit',
    '#value' => t('Upload'),
    '#validate' => array(),
    '#limit_validation_errors' => array($element['#parents']),
    '#attributes' => array('class' => array('shov3-file-form-submit')),
    '#weight' => -5,
    '#submit' => array('shov3_file_upload_remove_submit'),
    '#ajax' => $ajax_settings,
  );

  // The "Remove" button.
  $element['remove_button'] = array(
    '#name' => implode('_', $element['#parents']) . '_remove_button',
    '#type' => 'submit',
    '#value' => t('Remove'),
    '#validate' => array(),
    '#submit' => array('shov3_file_upload_remove_submit'),
    '#limit_validation_errors' => array($element['#parents']),
    '#weight' => -5,
    '#ajax' => $ajax_settings,
  );

  // The file upload field itself.
  $element['upload'] = array(
    '#name' => 'files[' . implode('_', $element['#parents']) . ']',
    '#type' => 'file',
    '#title' => t('Choose a file'),
    '#title_display' => 'invisible',
    '#size' => $element['#size'],
    '#theme_wrappers' => array(),
    '#weight' => -10,
    '#attributes' => array('class' => array('shov3-file-upload-file')),
  );

  // If the #upload_location is set we add a new key to the $form array that
  // that stores this information in a way that is easier for us to lookup in
  // the amazons3_cors_sign_request() function where we don't know the element's
  // complete parentage. The data is stored as part of the $form array so we
  // can retrieve it server side but ensure that it's never exposed client side
  // since doing so would allow users to upload files to an arbitrary directory
  // in the S3 bucket via local HTML modification.
  if (isset($element['#upload_location'])) {
    $form['#' . $element['upload_button']['#name'] . '_location'] = $element['#upload_location'];
  }

  if ($fid && $element['#file']) {
    $element['filelink'] = array(
      '#type' => 'markup',
      '#markup' => theme('file_link', array('file' => $element['#file'])) . ' ',
      '#weight' => -10,
    );
  }

  // Add the extension list to the page as JavaScript settings.
  if (isset($element['#upload_validators']['file_validate_extensions'][0])) {
    $extension_list = implode(',', array_filter(explode(' ', $element['#upload_validators']['file_validate_extensions'][0])));
    $element['upload']['#attached']['js'] = array(
      array(
        'type' => 'setting',
        'data' => array(
          'file' => array('elements' => array('#' . $element['#id'] . '-upload' => $extension_list)),
          'Shov3File' => array(
            'key' => variable_get('aws_key', ''),
          	'bucket' => variable_get('amazons3_bucket', ''),
            'folder' => str_replace('s3://', '', $element['#upload_location']),
          	'acl' => variable_get('amazons3_default_acl', 'public-read'),
          ),
        ),
      ),
    );
  }

  // The hidden elements get populated by javascript after uploading the file
  // to S3 and are then used by the value callback to save the new file record
  // to the db.
  $element['fid'] = array(
    '#type' => 'hidden',
    '#value' => $fid,
  );
  $element['filename'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($element['#file']->filename) ? $element['#file']->filename : '',
    // This keeps theme_file_widget() happy.
    '#markup' => '',
  );
  $element['filemime'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($element['#file']->filemime) ? $element['#file']->filemime : '',
  );
  $element['filesize'] = array(
    '#type' => 'hidden',
    '#default_value' => isset($element['#file']->filesize) ? $element['#file']->filesize : '',
  );

  // Add a class to the <form> element so we can find it with JS later.
  $form['#attributes'] = array('class' => array('shov3-file-upload-form'));

  $element['#prefix'] = '<div id="' . $element['#id'] . '-ajax-wrapper">';
  $element['#suffix'] = '</div>';

  return $element;
}

/**
 * Value callback for amazons3_cors_upload element type.
 */
function shov3_file_upload_value(&$element, $input = FALSE, $form_state = NULL) {
  global $user;
  $fid = 0;
  $return = array();

  $remove_button_clicked = FALSE;
  if (isset($form_state['triggering_element']) && array_pop($form_state['triggering_element']['#parents']) == 'remove_button') {
    $remove_button_clicked = TRUE;
  }

  // Find the current value of this field from the form state.
  $form_state_fid = $form_state['values'];
  foreach ($element['#parents'] as $parent) {
    $form_state_fid = isset($form_state_fid[$parent]) ? $form_state_fid[$parent] : 0;
  }

  if ($element['#extended'] && isset($form_state_fid['fid'])) {
    $fid = $form_state_fid['fid'];
  }
  elseif (is_numeric($form_state_fid)) {
    $fid = $form_state_fid;
  }

  // Process any input and save new uploads.
  if ($input !== FALSE && $fid == 0 && !empty($input['filename']) && empty($input['fid']) && !$remove_button_clicked) {
    $return = $input;

    // Construct a $file object.
    $file = new stdClass();
    $file->uid = $user->uid;
    $file->filename = $input['filename'];
    $file->filesize = $input['filesize'];
    $file->filemime = $input['filemime'];
    $base_dir = !empty($element['#upload_location']) ? str_replace('s3://', '', $element['#upload_location']) . '/' : '';
    $file->uri = 's3://' . $base_dir . $file->filename;
    $file->status = 0;
    $file->timestamp = REQUEST_TIME;

    // Save the uploaded file to the file_managed table.
    if ($file = file_save($file)) {
      $return['fid'] = $file->fid;
    }
    else {
      // Check for #filefield_value_callback values.
      // Because FAPI does not allow multiple #value_callback values like it
      // does for #element_validate and #process, this fills the missing
      // functionality to allow File fields to be extended through FAPI.
      if (isset($element['#file_value_callbacks'])) {
        foreach ($element['#file_value_callbacks'] as $callback) {
          $callback($element, $input, $form_state);
        }
      }
      // Load file if the FID has changed to confirm it exists.
      if (isset($input['fid']) && $file = file_load($input['fid'])) {
        $return['fid'] = $file->fid;
      }
    }
  }

  // If there is no input, set the default value.
  else {
    if ($element['#extended']) {
      $default_fid = isset($element['#default_value']['fid']) ? $element['#default_value']['fid'] : 0;
      $return = isset($element['#default_value']) ? $element['#default_value'] : array('fid' => 0);
    }
    else {
      $default_fid = isset($element['#default_value']) ? $element['#default_value'] : 0;
      $return = array('fid' => 0);
    }

    // Confirm that the file exists when used as a default value.
    if ($default_fid && $file = file_load($default_fid)) {
      $return['fid'] = $file->fid;
    }
    else {
      $return['fid'] = $fid;
    }
  }

  return $return;
}

/**
 * The #value_callback for the shov3_file field element.
 *
 * This is pretty much a copy of file_field_widget_value() but modified to use
 * the shov3_file_upload_value() function instead of the file.module one.
 */
function shov3_file_field_widget_value($element, $input = FALSE, $form_state) {
  if ($input) {
    // Checkboxes lose their value when empty.
    // If the display field is present make sure its unchecked value is saved.
    $field = field_widget_field($element, $form_state);
    if (empty($input['display'])) {
      $input['display'] = $field['settings']['display_field'] ? 0 : 1;
    }
  }

  // Handle uploads and the like.
  $return = shov3_file_upload_value($element, $input, $form_state);

  // Ensure that all the required properties are returned even if empty.
  $return += array(
    'fid' => 0,
    'display' => 1,
    'description' => '',
  );

  return $return;
}

/**
 * Validation callback for shov3_file element type.
 */
function shov3_file_upload_validate(&$element, &$form_state) {
  // Consolidate the array value of this field to a single FID.
  if (!$element['#extended']) {
    form_set_value($element, $element['fid']['#value'], $form_state);
  }
}

function shov3_file_upload_js($form, &$form_state) {
  // Find the element that triggered the AJAX callback and return it so that it
  // can be replaced.
  $parents = $form_state['triggering_element']['#array_parents'];
  $button_key = array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);
  return $element;
}

/**
 * Submit callback for the remove button on shov3_file elements.
 */
function shov3_file_upload_remove_submit($form, &$form_state) {
  // Determine whether it was the upload or the remove button that was clicked,
  // and set $element to the shov3 upload element that contains that button.
  $parents = $form_state['triggering_element']['#array_parents'];
  $button_key = array_pop($parents);
  $element = drupal_array_get_nested_value($form, $parents);

  // No action is needed here for the upload button, because all file uploads on
  // the form are processed by shov3_file_upload_value() regardless of which
  // button was clicked. Action is needed here for the remove button, because we
  // only remove a file in response to its remove button being clicked.
  if ($button_key == 'remove_button') {
    // If it's a temporary file we can safely remove it immediately, otherwise
    // it's up to the implementing module to clean up files that are in use.
    if ($element['#file'] && $element['#file']->status == 0) {
      file_delete($element['#file']);
    }
    // Update both $form_state['values'] and $form_state['input'] to reflect
    // that the file has been removed, so that the form is rebuilt correctly.
    // $form_state['values'] must be updated in case additional submit handlers
    // run, and for form building functions that run during the rebuild, such as
    // when the shov3_file_upload element is part of a field widget.
    // $form_state['input'] must be updated so that shov3_file_upload_value()
    // has correct information during the rebuild.
    $values_element = $element['#extended'] ? $element['fid'] : $element;
    form_set_value($values_element, NULL, $form_state);
    drupal_array_set_nested_value($form_state['input'], $values_element['#parents'], NULL);
  }

  $form_state['rebuild'] = TRUE;
}

